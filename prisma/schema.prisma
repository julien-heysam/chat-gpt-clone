generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String         @id @default(cuid())
  email              String?        @unique
  emailVerified      DateTime?
  name               String?
  password           String?
  image              String?
  globalSystemPrompt String?        @db.Text
  accounts           Account[]
  sessions           Session[]
  conversations      Conversation[]
  folders            Folder[]
  documents          Document[]
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Folder {
  id            String         @id @default(cuid())
  name          String
  systemPrompt  String?        @db.Text
  userId        String
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversations Conversation[]
  documents     Document[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Conversation {
  id        String    @id @default(cuid())
  title     String
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  folderId  String?
  folder    Folder?   @relation(fields: [folderId], references: [id], onDelete: SetNull)
  messages  Message[]
  tools     Tool[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Message {
  id             String       @id @default(cuid())
  content        String       @db.Text
  role           MessageRole
  model          String       @default("claude-4-sonnet")
  latency        Int?         // Response latency in milliseconds
  inputTokens    Int?         // Number of input tokens used
  outputTokens   Int?         // Number of output tokens generated
  cost           Float?       // Cost in USD for this message
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Tool {
  id               String         @id @default(cuid())
  name             String
  description      String?
  enabled          Boolean        @default(true)
  
  // MCP Connection Fields
  toolType         ToolType       @default(BUILTIN)
  mcpConnectionUrl String?        // URL to the MCP server
  mcpAuthType      McpAuthType?   // Authentication type
  mcpAuthToken     String?        // Encrypted authentication token/key
  mcpSchema        Json?          // JSON schema defining the tool's capabilities
  mcpTimeout       Int?           @default(30000) // Timeout in milliseconds
  
  conversations    Conversation[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model Document {
  id          String   @id @default(cuid())
  filename    String
  originalName String
  mimeType    String
  size        Int      // File size in bytes
  path        String   // Local file path
  folderId    String
  folder      Folder   @relation(fields: [folderId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

enum ToolType {
  BUILTIN
  MCP
}

enum McpAuthType {
  NONE
  API_KEY
  BEARER_TOKEN
  BASIC_AUTH
}
