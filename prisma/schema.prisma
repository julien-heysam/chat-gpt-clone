generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String         @id @default(cuid())
  email              String?        @unique
  emailVerified      DateTime?
  name               String?
  password           String?
  image              String?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  globalSystemPrompt String?
  accounts           Account[]
  conversations      Conversation[]
  documents          Document[]
  folders            Folder[]
  sessions           Session[]
  userTools          UserTool[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Folder {
  id            String         @id @default(cuid())
  name          String
  userId        String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  systemPrompt  String?
  conversations Conversation[]
  documents     Document[]
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Conversation {
  id        String    @id @default(cuid())
  title     String
  userId    String
  folderId  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  folder    Folder?   @relation(fields: [folderId], references: [id])
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]
  tools     Tool[]    @relation("ConversationToTool")
}

model Message {
  id             String       @id @default(cuid())
  content        String
  role           MessageRole
  conversationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  model          String       @default("claude-4-sonnet")
  latency        Int?
  cost           Float?
  inputTokens    Int?
  outputTokens   Int?
  toolCalls      Json?
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}

model Tool {
  id               String         @id @default(cuid())
  name             String
  description      String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  mcpAuthToken     String?
  mcpAuthType      McpAuthType?
  mcpConnectionUrl String?
  mcpSchema        Json?
  mcpTimeout       Int?           @default(30000)
  toolType         ToolType       @default(BUILTIN)
  userTools        UserTool[]
  conversations    Conversation[] @relation("ConversationToTool")
}

model UserTool {
  id               String   @id @default(cuid())
  userId           String
  toolId           String
  enabled          Boolean  @default(false)
  userMcpAuthToken String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  tool             Tool     @relation(fields: [toolId], references: [id], onDelete: Cascade)
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, toolId])
}

model Document {
  id           String   @id @default(cuid())
  filename     String
  originalName String
  mimeType     String
  size         Int
  path         String
  folderId     String
  userId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  folder       Folder   @relation(fields: [folderId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

enum ToolType {
  BUILTIN
  MCP
}

enum McpAuthType {
  NONE
  API_KEY
  BEARER_TOKEN
  BASIC_AUTH
}
